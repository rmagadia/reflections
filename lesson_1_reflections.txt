How did viewing a diff between two versions of a file help you see the bug that 
was introduced?

    

Viewing a diff helped show me where exactly (what line) the bug was located.


How could having easy access to the entire history of a file make you a more 
efficient programmer in the long term?

     

Having easy access to the entire history of a file would make you a more efficient programmer in the long term by allowing you to access earlier versions when you are debugging or when you need to refer 
back to earlier versions during longer projects.


What do you think are the pros and cons of manually choosing when to create a 
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    

PROS: 
- You can choose to create a commit at natural commiting points.
- You can create little notes that make commits easy to understand.
- Ideally, every commit will have one clear logical purpose.

CONS:
- Takes time.
- It's not always clear when to make a commit.


Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    

Often times, multiple files are inter-related, such as when you have a HTML, CSS, and JS file. In instances like this, it is useful to be able to save multiple files in one commit.




How can you use the commands git log and git diff to view the history of files?

    

Git log can be used to view the files within a repository located in a certain directory. Git diff can be used to compare two different files, specifically insertions and deletions.




How might using version control make you more confident to make changes that 
could break something?

    

Using version control will allow me to be liberal in the changes I make to my code since I know that I can easily return to a previous version.




Now that you have your workspace set up, what do you want to try using Git for?

    

I would like to use Git to save various versions on my next project and hopefully be able to be more liberal when it comes to trying out new code.


Other Notes:
- cd ~:takes you to home directory
	- mv <file path>: moves file to home directory
- commit: a snapshot of every file in a repository at the time the commit was made
- repository: collection of files tracked as a cohesive unit
- git config --global color.ui auto
- git diff first_id second_id
- git clone: to clone a repository
- git log: shows commits in repository prior to current commit
	- "q" to quit out of git log
- git checkout: temporarily change files back to how they were at the time of the commit

* C:/Program\ Files\ \(x86\)/Sublime\ Text\ 3/sublime_text.exe
